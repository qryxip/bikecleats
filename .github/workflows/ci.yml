name: CI

on:
  schedule:
    - cron: '0 0 * * 0'
  push:
    branches:
      - master
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+**'
  pull_request:

jobs:
  rustfmt:
    name: Rustfmt
    runs-on: ubuntu-20.04

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up `stable-x86_64-unknown-linux-gnu`
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable-x86_64-unknown-linux-gnu
          default: true
          profile: minimal
          components: rustfmt

      - name: cargo-fmt
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: -- --check

  cargo-udeps:
    name: cargo-udeps
    runs-on: ubuntu-20.04

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up `stable-x86_64-unknown-linux-gnu`
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable-x86_64-unknown-linux-gnu
          default: true

      - name: Set up `nightly-2021-04-10-x86_64-unknown-linux-gnu`
        id: install-nightly
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly-2021-04-10-x86_64-unknown-linux-gnu

      - name: Set up Python 3.9
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'

      - name: Resolve `cargo-udeps ^0.1`
        id: resolve-version-of-cargo-udeps
        run: |
          import json
          import urllib.request

          PACKAGE_NAME = 'cargo-udeps'
          VERSION_REQ_MAJOR = 0
          VERSION_REQ_MINOR = 1

          with urllib.request.urlopen(f'https://crates.io/api/v1/crates/{PACKAGE_NAME}') as res:
              versions = json.load(res)['versions']
          matched = set()
          for version in versions:
              major, minor, patch_pre_build = version['num'].split('.')
              major, minor = (int(major), int(minor))
              if ((major, VERSION_REQ_MAJOR) == (0, 0) and minor == VERSION_REQ_MINOR or major == VERSION_REQ_MAJOR and minor >= VERSION_REQ_MINOR) and patch_pre_build.isdecimal():
                  matched.add((minor, int(patch_pre_build)))
          if not matched:
              raise RuntimeError(f'No such package: `{PACKAGE_NAME} ^{VERSION_REQ_MAJOR}.{VERSION_REQ_MINOR}`')
          minor, patch = max(matched)
          print(f'::set-output name=version::{VERSION_REQ_MAJOR}.{minor}.{patch}')
        shell: python

      - name: Cache for cargo-udeps
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/.crates.toml
            ~/.cargo/.crates2.json
            ~/.cargo/bin/cargo-udeps
          key: cargo-udeps-installed-crates-${{ steps.resolve-version-of-cargo-udeps.outputs.version }}

      - name: Cache for build cache
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/git
            ~/.cargo/registry
            ./target
          key: cargo-udeps-build-${{ steps.install-nightly.outputs.rustc_hash }}-${{ hashFiles('./Cargo.*') }}

      - name: Install cargo-udeps v${{ steps.resolve-version-of-cargo-udeps.outputs.version }}
        uses: actions-rs/install@v0.1
        with:
          crate: cargo-udeps
          version: ${{ steps.resolve-version-of-cargo-udeps.outputs.version }}

      - name: cargo-udeps
        uses: actions-rs/cargo@v1
        with:
          command: udeps
          args: --all-targets
          toolchain: nightly-2021-04-10-x86_64-unknown-linux-gnu

  build:
    strategy:
      fail-fast: false
      matrix:
        toolchain:
          - stable-x86_64-pc-windows-msvc
          - stable-x86_64-apple-darwin
          - stable-x86_64-unknown-linux-gnu
        include:
          - { toolchain: stable-x86_64-pc-windows-msvc  , os: windows-2019 }
          - { toolchain: stable-x86_64-apple-darwin     , os: macos-10.15  }
          - { toolchain: stable-x86_64-unknown-linux-gnu, os: ubuntu-20.04 }

    name: ${{ matrix.toolchain }}
    runs-on: ${{ matrix.os }}

    steps:
      - name: Disable `core.autocrlf`
        run: git config --global core.autocrlf false
        if: matrix.os == 'windows-2019'

      - name: Checkout
        uses: actions/checkout@v2

      # Workaround for https://github.com/actions/cache/issues/403
      - name: Add `/usr/local/opt/gnu-tar/libexec/gnubin` to `$PATH`
        run: echo "PATH=/usr/local/opt/gnu-tar/libexec/gnubin:$PATH" >>"$GITHUB_ENV"
        if: matrix.os == 'macos-10.15'

      - name: Set up `${{ matrix.toolchain }}`
        id: install-toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.toolchain }}
          default: true
          profile: minimal
          components: clippy

      - name: Cache
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/git
            ~/.cargo/registry
            ./target
          key: build-${{ matrix.toolchain }}-${{ steps.install-toolchain.outputs.rustc_hash }}-${{ hashFiles('./Cargo.*') }}

      - name: cargo-clippy
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: --all-targets -- -D warnings

      - name: cargo-test
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --no-fail-fast
        env:
          RUST_BACKTRACE: full

      - name: cargo-install (locked)
        uses: actions-rs/cargo@v1
        with:
          command: install
          args: --path . --debug --locked

      - name: cargo-install
        uses: actions-rs/cargo@v1
        with:
          command: install
          args: --path . --debug

  upload-archives:
    strategy:
      fail-fast: false
      matrix:
        target-triple:
          - x86_64-pc-windows-msvc
          - x86_64-apple-darwin
          - x86_64-unknown-linux-gnu
        include:
          - { target-triple: x86_64-pc-windows-msvc  , host-triple: x86_64-pc-windows-msvc  , os: windows-2019 }
          - { target-triple: x86_64-apple-darwin     , host-triple: x86_64-apple-darwin     , os: macos-10.15  }
          - { target-triple: x86_64-unknown-linux-gnu, host-triple: x86_64-unknown-linux-gnu, os: ubuntu-20.04 }

    name: Upload (${{ matrix.target-triple }})
    runs-on: ${{ matrix.os }}
    if: startsWith(github.ref, 'refs/tags/')

    steps:
      - name: Disable `core.autocrlf`
        run: git config --global core.autocrlf false
        if: matrix.os == 'windows-2019'

      - name: Checkout
        uses: actions/checkout@v2

      - name: 'Set up `stable-${{ matrix.host-triple }}` (target: `${{ matrix.target-triple }}`)'
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable-${{ matrix.host-triple }}
          target: ${{ matrix.target-triple }}
          default: true
          profile: minimal

      - name: cargo-install
        uses: actions-rs/cargo@v1
        with:
          command: install
          args: --path . --target ${{ matrix.target-triple }} -v --locked

      - name: Create an asset
        id: asset
        run: |
          BIN_TARGET=cargo-equip
          if ${{ contains(matrix.target-triple, 'pc-windows') }}; then
            DOT_EXE=.exe
          fi
          ASSET_STEM="$BIN_TARGET-${GITHUB_REF#refs/tags/}-${{ matrix.target-triple }}"
          git archive -o "./$ASSET_STEM.tar" --prefix "$ASSET_STEM/" HEAD
          tar -xf "./$ASSET_STEM.tar"
          mv "$HOME/.cargo/bin/$BIN_TARGET$DOT_EXE" "./$ASSET_STEM/"
          if ${{ contains(matrix.target-triple, 'pc-windows') }}; then
            ASSET="$ASSET_STEM.zip"
            7z a "$ASSET" "./$ASSET_STEM"
            zipinfo "./$ASSET"
          else
            ASSET="$ASSET_STEM.tar.gz"
            tar -czvf "./$ASSET" "./$ASSET_STEM"
          fi
          echo "::set-output name=asset::$ASSET"
        shell: bash

      - name: Upload the artifact
        uses: actions/upload-artifact@v2
        with:
          name: assets
          path: ${{ steps.asset.outputs.asset }}

  upload-release-notes:
    name: Upload the release notes
    runs-on: ubuntu-20.04
    if: startsWith(github.ref, 'refs/tags/')

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up Python 3.9
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'

      - name: Prepare release notes
        run: |
          from pathlib import Path
          output = ''
          if Path('./CHANGELOG.md').exists():
              with open('./CHANGELOG.md') as file:
                  changelog = file.read()
              inside_subsection = False
              for line in changelog.splitlines():
                  is_h2 = line.startswith('## ')
                  if not inside_subsection and is_h2:
                      inside_subsection = True
                  elif inside_subsection and not is_h2:
                      output += line + '\n'
                  elif inside_subsection:
                      break
          with open('./release-notes.md', 'w') as file:
              file.write(output)
        shell: python

      - name: Upload the release notes
        uses: actions/upload-artifact@v2
        with:
          name: release-notes
          path: release-notes.md

  release:
    name: GitHub Release
    runs-on: ubuntu-20.04
    needs: [rustfmt, build, upload-archives, upload-release-notes]

    steps:
      - name: Download the assets
        uses: actions/download-artifact@v2
        with:
          name: assets
          path: ./assets

      - name: Download the release notes
        uses: actions/download-artifact@v2
        with:
          name: release-notes
          path: .

      - name: GH Release
        uses: softprops/action-gh-release@v1
        with:
          files: ./assets/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: GH Release
        uses: softprops/action-gh-release@v1
        with:
          body_path: ./release-notes.md
          files: ./assets/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
